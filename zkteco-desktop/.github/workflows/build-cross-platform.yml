name: Cross-Platform Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-13'  # Intel
            os: 'macos-13'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - platform: 'macos-latest'  # ARM64
            os: 'macos-latest' 
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
          - platform: 'ubuntu-20.04'  # Linux
            os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - platform: 'windows-latest'  # Windows
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.6'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './frontend/src-tauri -> target'

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Create Python virtual environment
        working-directory: ./backend
        shell: bash
        run: |
          python -m venv venv
          if [ "$RUNNER_OS" == "Windows" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build Python backend
        working-directory: ./backend
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            source venv/Scripts/activate
            powershell -ExecutionPolicy Bypass -File build_backend.ps1
          else
            source venv/bin/activate
            chmod +x build_backend.sh
            ./build_backend.sh
          fi

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install

      - name: Build Tauri application
        working-directory: ./frontend
        run: bun run tauri build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: |
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: startsWith(matrix.platform, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: |
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: |
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            frontend/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}